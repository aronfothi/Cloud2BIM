"""Utility functions for IFC file generation."""

import ifcopenshell
import numpy as np
from typing import Dict, Any
import logging

logger = logging.getLogger(__name__)


class IFCGenerator:
    def __init__(self, settings: Dict[str, Any]):
        """
        Initialize IFC Generator with settings.

        Args:
            settings: Dictionary containing IFC settings including:
                - project_name
                - project_long_name
                - project_version
                - building_name
                - building_type
                - building_phase
                - site_latitude
                - site_longitude
                - site_elevation
                - materials configuration
        """
        self.settings = settings
        self.ifc_file = ifcopenshell.file()
        self._setup_project()

    def _setup_project(self):
        """Set up the basic IFC project structure."""
        # Create IFC project
        self.project = self.ifc_file.create_entity(
            "IfcProject",
            GlobalId=ifcopenshell.guid.new(),
            Name=self.settings.get("project_name", "Cloud2BIM Project"),
            Description=self.settings.get("project_long_name", "Generated by Cloud2BIM"),
            Phase=self.settings.get("project_version", "1.0"),
        )

        # Set up project units
        length_unit = self.ifc_file.create_entity("IfcSIUnit", UnitType="LENGTHUNIT", Name="METRE")
        units = self.ifc_file.create_entity("IfcUnitAssignment", Units=[length_unit])
        self.project.UnitsInContext = units

        # Set up geometric context
        axis_placement = self.ifc_file.create_entity(
            "IfcAxis2Placement3D",
            Location=self.ifc_file.create_entity("IfcCartesianPoint", Coordinates=(0.0, 0.0, 0.0)),
            Axis=self.ifc_file.create_entity("IfcDirection", DirectionRatios=(0.0, 0.0, 1.0)),
            RefDirection=self.ifc_file.create_entity(
                "IfcDirection", DirectionRatios=(1.0, 0.0, 0.0)
            ),
        )
        self.context = self.ifc_file.create_entity(
            "IfcGeometricRepresentationContext",
            ContextType="Model",
            CoordinateSpaceDimension=3,
            WorldCoordinateSystem=axis_placement,
        )

        # Create site and building
        self.site = self.ifc_file.create_entity(
            "IfcSite",
            GlobalId=ifcopenshell.guid.new(),
            Name="Site",
            RefLatitude=self.settings.get("site_latitude", 0),
            RefLongitude=self.settings.get("site_longitude", 0),
            RefElevation=self.settings.get("site_elevation", 0),
        )

        self.building = self.ifc_file.create_entity(
            "IfcBuilding",
            GlobalId=ifcopenshell.guid.new(),
            Name=self.settings.get("building_name", "Building"),
            Description=self.settings.get("building_type", "Building"),
            ObjectType=self.settings.get("building_phase", "Construction"),
        )

        # Set up containment relationships
        self.ifc_file.create_entity(
            "IfcRelAggregates",
            GlobalId=ifcopenshell.guid.new(),
            RelatingObject=self.project,
            RelatedObjects=[self.site],
        )

        self.ifc_file.create_entity(
            "IfcRelAggregates",
            GlobalId=ifcopenshell.guid.new(),
            RelatingObject=self.site,
            RelatedObjects=[self.building],
        )

    def create_slab(self, points: np.ndarray, thickness: float, level: float) -> Any:
        """
        Create an IFC slab entity from point cloud data.

        Args:
            points: numpy array of shape (N, 3) containing points belonging to the slab
            thickness: thickness of the slab in meters
            level: elevation level of the slab

        Returns:
            IFC slab entity
        """
        try:
            # Create simplified slab geometry from points
            min_x, min_y, _ = np.min(points, axis=0)
            max_x, max_y, _ = np.max(points, axis=0)

            # Create extrusion profile
            profile_coords = [
                (min_x, min_y),
                (max_x, min_y),
                (max_x, max_y),
                (min_x, max_y),
                (min_x, min_y),
            ]
            points_list = [
                self.ifc_file.create_entity("IfcCartesianPoint", Coordinates=(x, y))
                for x, y in profile_coords
            ]

            polyline = self.ifc_file.create_entity("IfcPolyline", Points=points_list)
            profile = self.ifc_file.create_entity(
                "IfcArbitraryClosedProfileDef", ProfileType="AREA", OuterCurve=polyline
            )

            # Create extrusion
            direction = self.ifc_file.create_entity("IfcDirection", DirectionRatios=(0.0, 0.0, 1.0))
            position = self.ifc_file.create_entity(
                "IfcAxis2Placement3D",
                Location=self.ifc_file.create_entity(
                    "IfcCartesianPoint", Coordinates=(0.0, 0.0, level)
                ),
                Axis=direction,
            )

            solid = self.ifc_file.create_entity(
                "IfcExtrudedAreaSolid",
                SweptArea=profile,
                Position=position,
                ExtrudedDirection=direction,
                Depth=thickness,
            )

            shape = self.ifc_file.create_entity(
                "IfcShapeRepresentation",
                ContextOfItems=self.context,
                RepresentationIdentifier="Body",
                RepresentationType="SweptSolid",
                Items=[solid],
            )

            product_shape = self.ifc_file.create_entity(
                "IfcProductDefinitionShape", Representations=[shape]
            )

            # Create slab entity
            slab = self.ifc_file.create_entity(
                "IfcSlab",
                GlobalId=ifcopenshell.guid.new(),
                Name=f"Slab at level {level:.2f}",
                ObjectType="FLOOR",
                ObjectPlacement=self.ifc_file.create_entity(
                    "IfcLocalPlacement", RelativePlacement=position
                ),
                Representation=product_shape,
            )

            # Add to building
            self.ifc_file.create_entity(
                "IfcRelContainedInSpatialStructure",
                GlobalId=ifcopenshell.guid.new(),
                RelatingStructure=self.building,
                RelatedElements=[slab],
            )

            return slab

        except Exception as e:
            logger.error(f"Error creating IFC slab: {str(e)}")
            raise

    def create_wall(
        self, points: np.ndarray, thickness: float, height: float, base_level: float
    ) -> Any:
        """
        Create an IFC wall entity from point cloud data.

        Args:
            points: numpy array of shape (N, 3) containing points belonging to the wall
            thickness: wall thickness in meters
            height: wall height in meters
            base_level: elevation of wall base

        Returns:
            IFC wall entity
        """
        try:
            # Find wall direction using principal components
            points_2d = points[:, [0, 1]]  # Use only X and Y coordinates
            mean = np.mean(points_2d, axis=0)
            centered = points_2d - mean
            cov = np.cov(centered.T)
            eigenvals, eigenvecs = np.linalg.eig(cov)
            direction_idx = np.argmax(np.abs(eigenvals))
            direction = eigenvecs[:, direction_idx]

            # Create wall axis line
            start_point = mean - direction * np.max(np.abs(centered.dot(direction)))
            end_point = mean + direction * np.max(np.abs(centered.dot(direction)))

            axis_points = [
                self.ifc_file.create_entity(
                    "IfcCartesianPoint", Coordinates=(start_point[0], start_point[1])
                ),
                self.ifc_file.create_entity(
                    "IfcCartesianPoint", Coordinates=(end_point[0], end_point[1])
                ),
            ]

            wall_axis = self.ifc_file.create_entity("IfcPolyline", Points=axis_points)

            # Create wall geometry
            position = self.ifc_file.create_entity(
                "IfcAxis2Placement3D",
                Location=self.ifc_file.create_entity(
                    "IfcCartesianPoint", Coordinates=(0.0, 0.0, base_level)
                ),
            )

            material_layer = self.ifc_file.create_entity(
                "IfcMaterialLayer",
                Material=self.ifc_file.create_entity(
                    "IfcMaterial", Name=self.settings.get("material_for_walls", "Concrete")
                ),
                LayerThickness=thickness,
            )

            material_layer_set = self.ifc_file.create_entity(
                "IfcMaterialLayerSet", MaterialLayers=[material_layer]
            )

            wall = self.ifc_file.create_entity(
                "IfcWallStandardCase",
                GlobalId=ifcopenshell.guid.new(),
                Name=f"Wall at ({start_point[0]:.2f}, {start_point[1]:.2f})",
                ObjectType="STANDARD",
                ObjectPlacement=self.ifc_file.create_entity(
                    "IfcLocalPlacement", RelativePlacement=position
                ),
            )

            # Add material association
            self.ifc_file.create_entity(
                "IfcRelAssociatesMaterial",
                GlobalId=ifcopenshell.guid.new(),
                RelatedObjects=[wall],
                RelatingMaterial=material_layer_set,
            )

            # Add to building
            self.ifc_file.create_entity(
                "IfcRelContainedInSpatialStructure",
                GlobalId=ifcopenshell.guid.new(),
                RelatingStructure=self.building,
                RelatedElements=[wall],
            )

            return wall

        except Exception as e:
            logger.error(f"Error creating IFC wall: {str(e)}")
            raise

    def save(self, filepath: str):
        """Save the IFC file."""
        self.ifc_file.write(filepath)
